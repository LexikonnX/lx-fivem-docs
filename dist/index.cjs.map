{"version":3,"sources":["../src/index.ts","../src/utils/fs.ts","../src/parsers/lua.ts","../src/parsers/js.ts","../src/scan.ts","../src/generate/json.ts","../src/generate/md.ts"],"sourcesContent":["import { Command } from \"commander\"\nimport { scanProject } from \"./scan.js\"\nimport { writeTraceJSON } from \"./generate/json.js\"\nimport { writeApiMD } from \"./generate/md.js\"\nimport { mkdir } from \"fs/promises\"\nimport chalk from \"chalk\"\nimport { resolve } from \"path\"\n\nconst program = new Command()\nprogram.name(\"fx-trace\").version(\"0.1.0\")\n\nprogram\n  .command(\"scan\")\n  .argument(\"<root>\")\n  .option(\"--out <dir>\", \"output dir\", \"./docs\")\n  .option(\"--format <list>\", \"json,md\", \"json,md\")\n  .action(async (root, opts) => {\n    const out = resolve(process.cwd(), opts.out)\n    await mkdir(out, { recursive: true })\n    const data = await scanProject(root)\n    const formats = String(opts.format).split(\",\").map((x: string) => x.trim())\n    if (formats.includes(\"json\")) await writeTraceJSON(out, data)\n    if (formats.includes(\"md\")) await writeApiMD(out, data)\n    console.log(chalk.green(\"Scan complete\"), chalk.gray(out))\n  })\n\nprogram.parse()\n","import { glob } from \"glob\"\nimport { readFile } from \"fs/promises\"\nimport { join, sep } from \"path\"\nexport async function listFiles(root: string, patterns: string[]) {\n  const files = await glob(patterns, { cwd: root, dot: true, posix: true, absolute: false })\n  return files.map(f => f.split(sep).join(\"/\"))\n}\nexport async function read(root: string, rel: string) {\n  const p = join(root, rel)\n  return await readFile(p, \"utf8\")\n}\n","import luaparse from \"luaparse\"\nimport { TraceEvent, TraceCommand, TraceExport, TraceConvar } from \"../types.js\"\n\ntype LuaScan = {\n  events: TraceEvent[]\n  commands: TraceCommand[]\n  exports: TraceExport[]\n  convars: TraceConvar[]\n}\nexport function parseLua(content: string, file: string, side: \"client\" | \"server\" | \"shared\"): LuaScan {\n  const events: Record<string, TraceEvent> = {}\n  const commands: TraceCommand[] = []\n  const exportsArr: TraceExport[] = []\n  const convars: TraceConvar[] = []\n  const ast = luaparse.parse(content, { locations: true, ranges: true, comments: false, luaVersion: \"5.1\" })\n  function callName(node: any) {\n    if (node.type !== \"CallExpression\") return \"\"\n    if (node.base.type === \"Identifier\") return node.base.name\n    if (node.base.type === \"MemberExpression\" && node.base.identifier?.name) return node.base.identifier.name\n    return \"\"\n  }\n  function argString(node: any, idx: number) {\n    const a = node.arguments?.[idx]\n    if (!a) return undefined\n    if (a.type === \"StringLiteral\") return a.value\n    return undefined\n  }\n  function lineOf(node: any) {\n    return node.loc?.start?.line || 1\n  }\n  function addCallEvent(name: string, from: \"client\"|\"server\"|\"shared\", to: \"client\"|\"server\"|\"shared\", node: any) {\n    if (!events[name]) events[name] = { name, from, to, callsites: [], handlers: [] }\n    events[name].callsites.push({ file, line: lineOf(node) })\n  }\n  function addHandleEvent(name: string, to: \"client\"|\"server\"|\"shared\", node: any) {\n    if (!events[name]) events[name] = { name, from: to, to, callsites: [], handlers: [] }\n    events[name].handlers.push({ file, line: lineOf(node) })\n  }\n  function walk(node: any) {\n    if (!node || typeof node !== \"object\") return\n    if (node.type === \"CallExpression\") {\n      const n = callName(node)\n      if (n === \"TriggerEvent\") addCallEvent(argString(node, 0) || \"\", side, side, node)\n      if (n === \"TriggerServerEvent\") addCallEvent(argString(node, 0) || \"\", side, \"server\", node)\n      if (n === \"TriggerClientEvent\") addCallEvent(argString(node, 0) || \"\", side, \"client\", node)\n      if (n === \"RegisterNetEvent\") addHandleEvent(argString(node, 0) || \"\", side, node)\n      if (n === \"RegisterCommand\") {\n        const name = argString(node, 0) || \"\"\n        commands.push({ name, side, file, line: lineOf(node) })\n      }\n      if (n === \"exports\") {\n        const fn = argString(node, 0) || \"\"\n        if (fn) exportsArr.push({ name: fn, side, declared: { file, line: lineOf(node) }, usage: [] })\n      }\n      if (n === \"SetConvar\") {\n        const key = argString(node, 0) || \"\"\n        const val = argString(node, 1)\n        convars.push({ key, file, line: lineOf(node), defaultValue: val })\n      }\n      if (n === \"GetConvar\") {\n        const key = argString(node, 0) || \"\"\n        convars.push({ key, file, line: lineOf(node) })\n      }\n    }\n    for (const k in node) {\n      const v = (node as any)[k]\n      if (Array.isArray(v)) v.forEach(walk)\n      else if (v && typeof v === \"object\") walk(v)\n    }\n  }\n  walk(ast)\n  return { events: Object.values(events), commands, exports: exportsArr, convars }\n}\n","import { parse } from \"@typescript-eslint/typescript-estree\"\nimport { TraceNui } from \"../types.js\"\n\nexport function parseNui(content: string, file: string): TraceNui[] {\n  const ast = parse(content, { jsx: true, loc: true })\n  const out: TraceNui[] = []\n  function isSendNui(node: any) {\n    if (node.type !== \"CallExpression\") return false\n    const callee = node.callee\n    if (callee.type === \"Identifier\" && callee.name === \"SendNUIMessage\") return true\n    return false\n  }\n  function isRegisterCallback(node: any) {\n    if (node.type !== \"CallExpression\") return false\n    const callee = node.callee\n    if (callee.type === \"Identifier\" && callee.name === \"RegisterNUICallback\") return true\n    return false\n  }\n  function argString(node: any, idx: number) {\n    const a = node.arguments?.[idx]\n    if (!a) return undefined\n    if (a.type === \"Literal\") return a.value as string\n    if (a.type === \"TemplateLiteral\" && a.quasis[0]) return a.quasis[0].value.cooked as string\n    return undefined\n  }\n  function walk(node: any) {\n    if (!node || typeof node !== \"object\") return\n    if (node.type === \"CallExpression\") {\n      if (isSendNui(node)) {\n        out.push({ channel: \"SendNUIMessage\", direction: \"lua_to_js\", file, line: node.loc.start.line })\n      }\n      if (isRegisterCallback(node)) {\n        const ch = argString(node, 0) || \"\"\n        out.push({ channel: ch, direction: \"js_to_lua\", file, line: node.loc.start.line })\n      }\n    }\n    for (const k in node) {\n      const v = (node as any)[k]\n      if (Array.isArray(v)) v.forEach(walk)\n      else if (v && typeof v === \"object\") walk(v)\n    }\n  }\n  walk(ast)\n  return out\n}\n","import { listFiles, read } from \"./utils/fs.js\"\nimport { parseLua } from \"./parsers/lua.js\"\nimport { parseNui } from \"./parsers/js.js\"\nimport { TraceProject, TraceResource } from \"./types.js\"\nimport { basename, dirname } from \"path\"\n\nfunction detectSide(file: string): \"client\"|\"server\"|\"shared\"|\"nui\" {\n  const f = file.toLowerCase()\n  if (f.includes(\"/client\") || f.endsWith(\"/client.lua\") || f.endsWith(\"_client.lua\")) return \"client\"\n  if (f.includes(\"/server\") || f.endsWith(\"/server.lua\") || f.endsWith(\"_server.lua\")) return \"server\"\n  if (f.includes(\"/html/\") || f.endsWith(\".js\") || f.endsWith(\".ts\")) return \"nui\"\n  return \"shared\"\n}\nexport async function scanProject(root: string): Promise<TraceProject> {\n  const patterns = [\"**/*.lua\", \"**/*.js\", \"**/*.ts\", \"!**/node_modules/**\"]\n  const files = await listFiles(root, patterns)\n  const resourcesMap = new Map<string, TraceResource>()\n  for (const file of files) {\n    const parts = file.split(\"/\")\n    let resName = parts[0]\n    if (!resName || resName === \"resources\") resName = parts[1] || \"root\"\n    if (!resourcesMap.has(resName)) resourcesMap.set(resName, { name: resName, files: [], events: [], commands: [], exports: [], convars: [], nui: [], deps: [] })\n    const res = resourcesMap.get(resName)!\n    res.files.push(file)\n    const side = detectSide(file)\n    const content = await read(root, file)\n    if (file.endsWith(\".lua\")) {\n      const r = parseLua(content, file, side === \"nui\" ? \"client\" : side)\n      res.events.push(...r.events)\n      res.commands.push(...r.commands)\n      res.exports.push(...r.exports)\n      res.convars.push(...r.convars)\n    } else if (file.endsWith(\".js\") || file.endsWith(\".ts\")) {\n      const n = parseNui(content, file)\n      res.nui.push(...n)\n    }\n  }\n  return { resources: Array.from(resourcesMap.values()), scannedAt: new Date().toISOString(), version: \"0.1.0\" }\n}\n","import { writeFile } from \"fs/promises\"\nimport { TraceProject } from \"../types.js\"\n\nexport async function writeTraceJSON(outDir: string, data: TraceProject) {\n  await writeFile(outDir + \"/trace.json\", JSON.stringify(data, null, 2), \"utf8\")\n}\n","import { writeFile } from \"fs/promises\"\nimport { TraceProject } from \"../types.js\"\n\nexport async function writeApiMD(outDir: string, data: TraceProject) {\n  let md = \"# Project map\\n\\n\"\n  for (const r of data.resources) {\n    md += `## ${r.name}\\n\\n`\n    if (r.commands.length) {\n      md += \"### Commands\\n\\n| Command | Side | File | Line |\\n|--------:|-----|------|------|\\n\"\n      for (const c of r.commands) md += `| ${c.name} | ${c.side} | ${c.file} | ${c.line} |\\n`\n      md += \"\\n\"\n    }\n    if (r.events.length) {\n      md += \"### Net events\\n\\n| Name | From | To | Calls | Handlers |\\n|------|------|----|-------|----------|\\n\"\n      for (const e of r.events) {\n        const calls = e.callsites.map(x => `${x.file}:${x.line}`).join(\", \")\n        const handlers = e.handlers.map(x => `${x.file}:${x.line}`).join(\", \")\n        md += `| ${e.name} | ${e.from} | ${e.to} | ${calls} | ${handlers} |\\n`\n      }\n      md += \"\\n\"\n    }\n    if (r.exports.length) {\n      md += \"### Exports\\n\\n| Name | Side | Declared |\\n|------|------|----------|\\n\"\n      for (const x of r.exports) md += `| ${x.name} | ${x.side} | ${x.declared.file}:${x.declared.line} |\\n`\n      md += \"\\n\"\n    }\n    if (r.nui.length) {\n      md += \"### NUI\\n\\n| Channel | Direction | File | Line |\\n|---------|-----------|------|------|\\n\"\n      for (const n of r.nui) md += `| ${n.channel} | ${n.direction} | ${n.file} | ${n.line} |\\n`\n      md += \"\\n\"\n    }\n  }\n  await writeFile(outDir + \"/API.md\", md, \"utf8\")\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAwB;;;ACAxB,kBAAqB;AACrB,sBAAyB;AACzB,kBAA0B;AAC1B,eAAsB,UAAU,MAAc,UAAoB;AAChE,QAAM,QAAQ,UAAM,kBAAK,UAAU,EAAE,KAAK,MAAM,KAAK,MAAM,OAAO,MAAM,UAAU,MAAM,CAAC;AACzF,SAAO,MAAM,IAAI,OAAK,EAAE,MAAM,eAAG,EAAE,KAAK,GAAG,CAAC;AAC9C;AACA,eAAsB,KAAK,MAAc,KAAa;AACpD,QAAM,QAAI,kBAAK,MAAM,GAAG;AACxB,SAAO,UAAM,0BAAS,GAAG,MAAM;AACjC;;;ACVA,sBAAqB;AASd,SAAS,SAAS,SAAiB,MAAc,MAA+C;AACrG,QAAM,SAAqC,CAAC;AAC5C,QAAM,WAA2B,CAAC;AAClC,QAAM,aAA4B,CAAC;AACnC,QAAM,UAAyB,CAAC;AAChC,QAAM,MAAM,gBAAAA,QAAS,MAAM,SAAS,EAAE,WAAW,MAAM,QAAQ,MAAM,UAAU,OAAO,YAAY,MAAM,CAAC;AACzG,WAAS,SAAS,MAAW;AAC3B,QAAI,KAAK,SAAS,iBAAkB,QAAO;AAC3C,QAAI,KAAK,KAAK,SAAS,aAAc,QAAO,KAAK,KAAK;AACtD,QAAI,KAAK,KAAK,SAAS,sBAAsB,KAAK,KAAK,YAAY,KAAM,QAAO,KAAK,KAAK,WAAW;AACrG,WAAO;AAAA,EACT;AACA,WAAS,UAAU,MAAW,KAAa;AACzC,UAAM,IAAI,KAAK,YAAY,GAAG;AAC9B,QAAI,CAAC,EAAG,QAAO;AACf,QAAI,EAAE,SAAS,gBAAiB,QAAO,EAAE;AACzC,WAAO;AAAA,EACT;AACA,WAAS,OAAO,MAAW;AACzB,WAAO,KAAK,KAAK,OAAO,QAAQ;AAAA,EAClC;AACA,WAAS,aAAa,MAAc,MAAkC,IAAgC,MAAW;AAC/G,QAAI,CAAC,OAAO,IAAI,EAAG,QAAO,IAAI,IAAI,EAAE,MAAM,MAAM,IAAI,WAAW,CAAC,GAAG,UAAU,CAAC,EAAE;AAChF,WAAO,IAAI,EAAE,UAAU,KAAK,EAAE,MAAM,MAAM,OAAO,IAAI,EAAE,CAAC;AAAA,EAC1D;AACA,WAAS,eAAe,MAAc,IAAgC,MAAW;AAC/E,QAAI,CAAC,OAAO,IAAI,EAAG,QAAO,IAAI,IAAI,EAAE,MAAM,MAAM,IAAI,IAAI,WAAW,CAAC,GAAG,UAAU,CAAC,EAAE;AACpF,WAAO,IAAI,EAAE,SAAS,KAAK,EAAE,MAAM,MAAM,OAAO,IAAI,EAAE,CAAC;AAAA,EACzD;AACA,WAAS,KAAK,MAAW;AACvB,QAAI,CAAC,QAAQ,OAAO,SAAS,SAAU;AACvC,QAAI,KAAK,SAAS,kBAAkB;AAClC,YAAM,IAAI,SAAS,IAAI;AACvB,UAAI,MAAM,eAAgB,cAAa,UAAU,MAAM,CAAC,KAAK,IAAI,MAAM,MAAM,IAAI;AACjF,UAAI,MAAM,qBAAsB,cAAa,UAAU,MAAM,CAAC,KAAK,IAAI,MAAM,UAAU,IAAI;AAC3F,UAAI,MAAM,qBAAsB,cAAa,UAAU,MAAM,CAAC,KAAK,IAAI,MAAM,UAAU,IAAI;AAC3F,UAAI,MAAM,mBAAoB,gBAAe,UAAU,MAAM,CAAC,KAAK,IAAI,MAAM,IAAI;AACjF,UAAI,MAAM,mBAAmB;AAC3B,cAAM,OAAO,UAAU,MAAM,CAAC,KAAK;AACnC,iBAAS,KAAK,EAAE,MAAM,MAAM,MAAM,MAAM,OAAO,IAAI,EAAE,CAAC;AAAA,MACxD;AACA,UAAI,MAAM,WAAW;AACnB,cAAM,KAAK,UAAU,MAAM,CAAC,KAAK;AACjC,YAAI,GAAI,YAAW,KAAK,EAAE,MAAM,IAAI,MAAM,UAAU,EAAE,MAAM,MAAM,OAAO,IAAI,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,MAC/F;AACA,UAAI,MAAM,aAAa;AACrB,cAAM,MAAM,UAAU,MAAM,CAAC,KAAK;AAClC,cAAM,MAAM,UAAU,MAAM,CAAC;AAC7B,gBAAQ,KAAK,EAAE,KAAK,MAAM,MAAM,OAAO,IAAI,GAAG,cAAc,IAAI,CAAC;AAAA,MACnE;AACA,UAAI,MAAM,aAAa;AACrB,cAAM,MAAM,UAAU,MAAM,CAAC,KAAK;AAClC,gBAAQ,KAAK,EAAE,KAAK,MAAM,MAAM,OAAO,IAAI,EAAE,CAAC;AAAA,MAChD;AAAA,IACF;AACA,eAAW,KAAK,MAAM;AACpB,YAAM,IAAK,KAAa,CAAC;AACzB,UAAI,MAAM,QAAQ,CAAC,EAAG,GAAE,QAAQ,IAAI;AAAA,eAC3B,KAAK,OAAO,MAAM,SAAU,MAAK,CAAC;AAAA,IAC7C;AAAA,EACF;AACA,OAAK,GAAG;AACR,SAAO,EAAE,QAAQ,OAAO,OAAO,MAAM,GAAG,UAAU,SAAS,YAAY,QAAQ;AACjF;;;ACxEA,+BAAsB;AAGf,SAAS,SAAS,SAAiB,MAA0B;AAClE,QAAM,UAAM,gCAAM,SAAS,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AACnD,QAAM,MAAkB,CAAC;AACzB,WAAS,UAAU,MAAW;AAC5B,QAAI,KAAK,SAAS,iBAAkB,QAAO;AAC3C,UAAM,SAAS,KAAK;AACpB,QAAI,OAAO,SAAS,gBAAgB,OAAO,SAAS,iBAAkB,QAAO;AAC7E,WAAO;AAAA,EACT;AACA,WAAS,mBAAmB,MAAW;AACrC,QAAI,KAAK,SAAS,iBAAkB,QAAO;AAC3C,UAAM,SAAS,KAAK;AACpB,QAAI,OAAO,SAAS,gBAAgB,OAAO,SAAS,sBAAuB,QAAO;AAClF,WAAO;AAAA,EACT;AACA,WAAS,UAAU,MAAW,KAAa;AACzC,UAAM,IAAI,KAAK,YAAY,GAAG;AAC9B,QAAI,CAAC,EAAG,QAAO;AACf,QAAI,EAAE,SAAS,UAAW,QAAO,EAAE;AACnC,QAAI,EAAE,SAAS,qBAAqB,EAAE,OAAO,CAAC,EAAG,QAAO,EAAE,OAAO,CAAC,EAAE,MAAM;AAC1E,WAAO;AAAA,EACT;AACA,WAAS,KAAK,MAAW;AACvB,QAAI,CAAC,QAAQ,OAAO,SAAS,SAAU;AACvC,QAAI,KAAK,SAAS,kBAAkB;AAClC,UAAI,UAAU,IAAI,GAAG;AACnB,YAAI,KAAK,EAAE,SAAS,kBAAkB,WAAW,aAAa,MAAM,MAAM,KAAK,IAAI,MAAM,KAAK,CAAC;AAAA,MACjG;AACA,UAAI,mBAAmB,IAAI,GAAG;AAC5B,cAAM,KAAK,UAAU,MAAM,CAAC,KAAK;AACjC,YAAI,KAAK,EAAE,SAAS,IAAI,WAAW,aAAa,MAAM,MAAM,KAAK,IAAI,MAAM,KAAK,CAAC;AAAA,MACnF;AAAA,IACF;AACA,eAAW,KAAK,MAAM;AACpB,YAAM,IAAK,KAAa,CAAC;AACzB,UAAI,MAAM,QAAQ,CAAC,EAAG,GAAE,QAAQ,IAAI;AAAA,eAC3B,KAAK,OAAO,MAAM,SAAU,MAAK,CAAC;AAAA,IAC7C;AAAA,EACF;AACA,OAAK,GAAG;AACR,SAAO;AACT;;;ACtCA,SAAS,WAAW,MAAgD;AAClE,QAAM,IAAI,KAAK,YAAY;AAC3B,MAAI,EAAE,SAAS,SAAS,KAAK,EAAE,SAAS,aAAa,KAAK,EAAE,SAAS,aAAa,EAAG,QAAO;AAC5F,MAAI,EAAE,SAAS,SAAS,KAAK,EAAE,SAAS,aAAa,KAAK,EAAE,SAAS,aAAa,EAAG,QAAO;AAC5F,MAAI,EAAE,SAAS,QAAQ,KAAK,EAAE,SAAS,KAAK,KAAK,EAAE,SAAS,KAAK,EAAG,QAAO;AAC3E,SAAO;AACT;AACA,eAAsB,YAAY,MAAqC;AACrE,QAAM,WAAW,CAAC,YAAY,WAAW,WAAW,qBAAqB;AACzE,QAAM,QAAQ,MAAM,UAAU,MAAM,QAAQ;AAC5C,QAAM,eAAe,oBAAI,IAA2B;AACpD,aAAW,QAAQ,OAAO;AACxB,UAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,QAAI,UAAU,MAAM,CAAC;AACrB,QAAI,CAAC,WAAW,YAAY,YAAa,WAAU,MAAM,CAAC,KAAK;AAC/D,QAAI,CAAC,aAAa,IAAI,OAAO,EAAG,cAAa,IAAI,SAAS,EAAE,MAAM,SAAS,OAAO,CAAC,GAAG,QAAQ,CAAC,GAAG,UAAU,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;AAC7J,UAAM,MAAM,aAAa,IAAI,OAAO;AACpC,QAAI,MAAM,KAAK,IAAI;AACnB,UAAM,OAAO,WAAW,IAAI;AAC5B,UAAM,UAAU,MAAM,KAAK,MAAM,IAAI;AACrC,QAAI,KAAK,SAAS,MAAM,GAAG;AACzB,YAAM,IAAI,SAAS,SAAS,MAAM,SAAS,QAAQ,WAAW,IAAI;AAClE,UAAI,OAAO,KAAK,GAAG,EAAE,MAAM;AAC3B,UAAI,SAAS,KAAK,GAAG,EAAE,QAAQ;AAC/B,UAAI,QAAQ,KAAK,GAAG,EAAE,OAAO;AAC7B,UAAI,QAAQ,KAAK,GAAG,EAAE,OAAO;AAAA,IAC/B,WAAW,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS,KAAK,GAAG;AACvD,YAAM,IAAI,SAAS,SAAS,IAAI;AAChC,UAAI,IAAI,KAAK,GAAG,CAAC;AAAA,IACnB;AAAA,EACF;AACA,SAAO,EAAE,WAAW,MAAM,KAAK,aAAa,OAAO,CAAC,GAAG,YAAW,oBAAI,KAAK,GAAE,YAAY,GAAG,SAAS,QAAQ;AAC/G;;;ACtCA,IAAAC,mBAA0B;AAG1B,eAAsB,eAAe,QAAgB,MAAoB;AACvE,YAAM,4BAAU,SAAS,eAAe,KAAK,UAAU,MAAM,MAAM,CAAC,GAAG,MAAM;AAC/E;;;ACLA,IAAAC,mBAA0B;AAG1B,eAAsB,WAAW,QAAgB,MAAoB;AACnE,MAAI,KAAK;AACT,aAAW,KAAK,KAAK,WAAW;AAC9B,UAAM,MAAM,EAAE,IAAI;AAAA;AAAA;AAClB,QAAI,EAAE,SAAS,QAAQ;AACrB,YAAM;AACN,iBAAW,KAAK,EAAE,SAAU,OAAM,KAAK,EAAE,IAAI,MAAM,EAAE,IAAI,MAAM,EAAE,IAAI,MAAM,EAAE,IAAI;AAAA;AACjF,YAAM;AAAA,IACR;AACA,QAAI,EAAE,OAAO,QAAQ;AACnB,YAAM;AACN,iBAAW,KAAK,EAAE,QAAQ;AACxB,cAAM,QAAQ,EAAE,UAAU,IAAI,OAAK,GAAG,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI;AACnE,cAAM,WAAW,EAAE,SAAS,IAAI,OAAK,GAAG,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI;AACrE,cAAM,KAAK,EAAE,IAAI,MAAM,EAAE,IAAI,MAAM,EAAE,EAAE,MAAM,KAAK,MAAM,QAAQ;AAAA;AAAA,MAClE;AACA,YAAM;AAAA,IACR;AACA,QAAI,EAAE,QAAQ,QAAQ;AACpB,YAAM;AACN,iBAAW,KAAK,EAAE,QAAS,OAAM,KAAK,EAAE,IAAI,MAAM,EAAE,IAAI,MAAM,EAAE,SAAS,IAAI,IAAI,EAAE,SAAS,IAAI;AAAA;AAChG,YAAM;AAAA,IACR;AACA,QAAI,EAAE,IAAI,QAAQ;AAChB,YAAM;AACN,iBAAW,KAAK,EAAE,IAAK,OAAM,KAAK,EAAE,OAAO,MAAM,EAAE,SAAS,MAAM,EAAE,IAAI,MAAM,EAAE,IAAI;AAAA;AACpF,YAAM;AAAA,IACR;AAAA,EACF;AACA,YAAM,4BAAU,SAAS,WAAW,IAAI,MAAM;AAChD;;;AN7BA,IAAAC,mBAAsB;AACtB,mBAAkB;AAClB,IAAAC,eAAwB;AAExB,IAAM,UAAU,IAAI,yBAAQ;AAC5B,QAAQ,KAAK,UAAU,EAAE,QAAQ,OAAO;AAExC,QACG,QAAQ,MAAM,EACd,SAAS,QAAQ,EACjB,OAAO,eAAe,cAAc,QAAQ,EAC5C,OAAO,mBAAmB,WAAW,SAAS,EAC9C,OAAO,OAAO,MAAM,SAAS;AAC5B,QAAM,UAAM,sBAAQ,QAAQ,IAAI,GAAG,KAAK,GAAG;AAC3C,YAAM,wBAAM,KAAK,EAAE,WAAW,KAAK,CAAC;AACpC,QAAM,OAAO,MAAM,YAAY,IAAI;AACnC,QAAM,UAAU,OAAO,KAAK,MAAM,EAAE,MAAM,GAAG,EAAE,IAAI,CAAC,MAAc,EAAE,KAAK,CAAC;AAC1E,MAAI,QAAQ,SAAS,MAAM,EAAG,OAAM,eAAe,KAAK,IAAI;AAC5D,MAAI,QAAQ,SAAS,IAAI,EAAG,OAAM,WAAW,KAAK,IAAI;AACtD,UAAQ,IAAI,aAAAC,QAAM,MAAM,eAAe,GAAG,aAAAA,QAAM,KAAK,GAAG,CAAC;AAC3D,CAAC;AAEH,QAAQ,MAAM;","names":["luaparse","import_promises","import_promises","import_promises","import_path","chalk"]}